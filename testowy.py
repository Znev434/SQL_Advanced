import sqlite3
import csv

# Po≈ÇƒÖczenie z bazƒÖ danych
conn = sqlite3.connect("database.sqlite")
cursor = conn.cursor()

# Tworzenie tabeli 'users' (je≈õli nie istnieje)
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

# Tworzenie tabeli 'posts' (je≈õli nie istnieje)
cursor.execute("""
CREATE TABLE IF NOT EXISTS posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
)
""")

# Tworzenie tabeli 'comments' (je≈õli nie istnieje)
cursor.execute("""
CREATE TABLE IF NOT EXISTS comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    post_id INTEGER NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
)
""")

# Tworzenie tabeli 'likes' (je≈õli nie istnieje)
cursor.execute("""
CREATE TABLE IF NOT EXISTS likes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    post_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    UNIQUE (user_id, post_id)
)
""")

# Tworzenie tabeli 'logs' (je≈õli nie istnieje)
cursor.execute("""
CREATE TABLE IF NOT EXISTS logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    event TEXT NOT NULL,
    details TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

print("‚úÖ Wszystkie tabele zosta≈Çy utworzone: users, posts, comments, likes, logs.")

# Dodanie indeks√≥w dla optymalizacji zapyta≈Ñ
cursor.execute("CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);")
cursor.execute("CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);")
cursor.execute("CREATE INDEX IF NOT EXISTS idx_posts_user_id ON posts(user_id);")
cursor.execute("CREATE INDEX IF NOT EXISTS idx_posts_created_at ON posts(created_at);")
cursor.execute("CREATE INDEX IF NOT EXISTS idx_comments_post_id ON comments(post_id);")
cursor.execute("CREATE INDEX IF NOT EXISTS idx_likes_post_id ON likes(post_id);")

print("‚úÖ Indeksy zosta≈Çy utworzone!")


# Funkcja do dodawania u≈ºytkownika
def add_user(username, email):
    try:
        cursor.execute("BEGIN")
        cursor.execute("INSERT INTO users (username, email) VALUES (?, ?)", (username, email))
        conn.commit()
        print(f"‚úÖ Dodano u≈ºytkownika: {username}")
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        print(f"üìù U≈ºytkownicy po dodaniu: {cursor.fetchall()}")
    except sqlite3.IntegrityError as e:
        conn.rollback()
        print(f"‚ö† B≈ÇƒÖd: U≈ºytkownik {username} lub email {email} ju≈º istnieje! ({e})")


# Funkcja do dodawania postu u≈ºytkownika + logowanie
def add_post(user_id, content):
    try:
        user_id = int(user_id)
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if not cursor.fetchone():
            raise ValueError(f"U≈ºytkownik o ID {user_id} nie istnieje!")
        cursor.execute("BEGIN")
        cursor.execute("INSERT INTO posts (user_id, content) VALUES (?, ?)", (user_id, content))
        conn.commit()
        log_event("Dodano post", f"U≈ºytkownik {user_id} doda≈Ç post: '{content}'")
        print(f"‚úÖ Dodano post u≈ºytkownika {user_id}!")
        cursor.execute("SELECT * FROM posts WHERE user_id = ?", (user_id,))
        print(f"üìù Posty u≈ºytkownika {user_id} po dodaniu: {cursor.fetchall()}")
    except (sqlite3.IntegrityError, ValueError) as e:
        conn.rollback()
        if "FOREIGN KEY" in str(e):
            print(f"‚ö† B≈ÇƒÖd: U≈ºytkownik o ID {user_id} nie istnieje!")
        else:
            print(f"‚ö† B≈ÇƒÖd: Nie mo≈ºna dodaƒá postu dla u≈ºytkownika {user_id}! ({e})")


# Funkcja do dodawania komentarza
def add_comment(user_id, post_id, content):
    try:
        user_id = int(user_id)
        post_id = int(post_id)
        # Sprawdzenie, czy u≈ºytkownik i post istniejƒÖ
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if not cursor.fetchone():
            raise ValueError(f"U≈ºytkownik o ID {user_id} nie istnieje!")
        cursor.execute("SELECT id FROM posts WHERE id = ?", (post_id,))
        if not cursor.fetchone():
            raise ValueError(f"Post o ID {post_id} nie istnieje!")

        cursor.execute("BEGIN")
        cursor.execute("INSERT INTO comments (user_id, post_id, content) VALUES (?, ?, ?)", (user_id, post_id, content))
        conn.commit()
        log_event("Dodano komentarz", f"U≈ºytkownik {user_id} skomentowa≈Ç post {post_id}: '{content}'")
        print(f"‚úÖ Dodano komentarz u≈ºytkownika {user_id} do postu {post_id}!")
        # Diagnostyka: sprawdzenie wszystkich komentarzy po dodaniu
        cursor.execute("SELECT * FROM comments WHERE post_id = ?", (post_id,))
        print(f"üìù Komentarze do postu {post_id} zaraz po dodaniu: {cursor.fetchall()}")
        # Dodatkowe sprawdzenie ca≈Çej tabeli
        cursor.execute("SELECT * FROM comments")
        print(f"üìù Wszystkie komentarze w bazie po dodaniu: {cursor.fetchall()}")
    except (sqlite3.IntegrityError, ValueError) as e:
        conn.rollback()
        if "FOREIGN KEY" in str(e):
            print(f"‚ö† B≈ÇƒÖd: Niew≈Ça≈õciwy user_id ({user_id}) lub post_id ({post_id})!")
        else:
            print(f"‚ö† B≈ÇƒÖd: Nie mo≈ºna dodaƒá komentarza dla u≈ºytkownika {user_id} do postu {post_id}! ({e})")


# Funkcja do dodawania polubienia + logowanie
def add_like(user_id, post_id):
    try:
        user_id = int(user_id)
        post_id = int(post_id)
        cursor.execute("BEGIN")
        cursor.execute("INSERT INTO likes (user_id, post_id) VALUES (?, ?)", (user_id, post_id))
        conn.commit()
        log_event("Dodano polubienie", f"U≈ºytkownik {user_id} polubi≈Ç post {post_id}")
        print(f"‚ù§Ô∏è U≈ºytkownik {user_id} polubi≈Ç post {post_id}!")
    except sqlite3.IntegrityError as e:
        conn.rollback()
        if "FOREIGN KEY" in str(e):
            print(f"‚ö† B≈ÇƒÖd: Niew≈Ça≈õciwy user_id ({user_id}) lub post_id ({post_id})!")
        else:
            print(f"‚ö† B≈ÇƒÖd: U≈ºytkownik {user_id} ju≈º polubi≈Ç post {post_id}! ({e})")


# Funkcja do logowania zdarze≈Ñ
def log_event(event, details):
    try:
        cursor.execute("INSERT INTO logs (event, details) VALUES (?, ?)", (event, details))
        conn.commit()
    except sqlite3.Error as e:
        print(f"‚ö† B≈ÇƒÖd podczas logowania zdarzenia: {e}")


# Dodanie przyk≈Çadowych u≈ºytkownik√≥w
add_user("user1", "user1@example.com")
add_user("user2", "user2@example.com")


# Funkcja do interaktywnego dodawania u≈ºytkownika
def add_user_interactively():
    username = input("\nüìù Podaj nazwƒô u≈ºytkownika: ")
    email = input("üìß Podaj email u≈ºytkownika: ")
    if "@" not in email:
        print("‚ö† B≈ÇƒÖd: Email musi zawieraƒá znak '@'!")
        return
    add_user(username, email)


# Funkcja do interaktywnego dodawania postu
def add_post_interactively():
    try:
        user_id = int(input("\nüÜî Podaj ID u≈ºytkownika, kt√≥ry pisze post: "))
        content = input("‚úè Podaj tre≈õƒá postu: ")
        add_post(user_id, content)
    except ValueError:
        print("‚ö† B≈ÇƒÖd: Wpisz poprawne ID jako liczbƒô!")


# Funkcja do interaktywnego dodawania komentarza
def add_comment_interactively():
    try:
        user_id = int(input("\nüÜî Podaj ID u≈ºytkownika, kt√≥ry dodaje komentarz: "))
        post_id = int(input("üìù Podaj ID postu, kt√≥ry komentujesz: "))
        content = input("üí¨ Podaj tre≈õƒá komentarza: ")
        add_comment(user_id, post_id, content)
    except ValueError:
        print("‚ö† B≈ÇƒÖd: Wpisz poprawne ID jako liczbƒô!")


# Funkcja do interaktywnego dodawania polubienia
def add_like_interactively():
    try:
        user_id = int(input("\nüÜî Podaj ID u≈ºytkownika, kt√≥ry lajkuje post: "))
        post_id = int(input("üëç Podaj ID postu, kt√≥ry chcesz polubiƒá: "))
        add_like(user_id, post_id)
    except ValueError:
        print("‚ö† B≈ÇƒÖd: Wpisz poprawne ID jako liczbƒô!")


# "Procedura sk≈Çadowana" do pobierania post√≥w u≈ºytkownika
def get_user_posts(user_id):
    cursor.execute("""
    SELECT posts.id, posts.content, posts.created_at
    FROM posts
    WHERE posts.user_id = ?
    ORDER BY posts.created_at DESC
    """, (user_id,))
    posts = cursor.fetchall()
    print(f"\nüìù Posty u≈ºytkownika {user_id}:")
    for post in posts:
        print(post)


# "Procedura sk≈Çadowana" do pobierania komentarzy pod postem
def get_post_comments(post_id):
    cursor.execute("""
    SELECT c.id, u.username, c.content, c.created_at
    FROM comments c
    JOIN users u ON c.user_id = u.id
    WHERE c.post_id = ?
    ORDER BY c.created_at DESC
    """, (post_id,))
    comments = cursor.fetchall()
    print(f"\nüí¨ Komentarze do postu {post_id}:")
    print("=" * 50)
    if not comments:
        print("‚ö† Brak komentarzy dla tego postu!")
    else:
        for comment in comments:
            print(comment)


# "Procedura sk≈Çadowana" do liczenia polubie≈Ñ postu
def get_post_likes(post_id):
    cursor.execute("""
    SELECT COUNT(*) FROM likes WHERE post_id = ?
    """, (post_id,))
    likes_count = cursor.fetchone()[0]
    print(f"\nüëç Liczba polubie≈Ñ dla postu {post_id}: {likes_count}")


# Pobranie liczby post√≥w ka≈ºdego u≈ºytkownika
def get_user_post_counts():
    cursor.execute("""
    SELECT users.username, COUNT(posts.id) AS post_count
    FROM users
    LEFT JOIN posts ON users.id = posts.user_id
    GROUP BY users.id
    ORDER BY post_count DESC;
    """)
    results = cursor.fetchall()
    print("\nüìä Liczba post√≥w ka≈ºdego u≈ºytkownika:")
    for row in results:
        print(row)


# Pobranie post√≥w z najwiƒôkszƒÖ liczbƒÖ komentarzy
def get_most_commented_posts():
    cursor.execute("""
    SELECT posts.id, posts.content, users.username, COUNT(comments.id) AS comment_count
    FROM posts
    JOIN users ON posts.user_id = users.id
    LEFT JOIN comments ON posts.id = comments.post_id
    GROUP BY posts.id
    HAVING comment_count > 0
    ORDER BY comment_count DESC;
    """)
    results = cursor.fetchall()
    print("\nüí¨ Posty z najwiƒôkszƒÖ liczbƒÖ komentarzy:")
    for row in results:
        print(row)


# Pobranie u≈ºytkownik√≥w, kt√≥rzy polubili najwiƒôcej post√≥w
def get_top_likers():
    cursor.execute("""
    SELECT users.username, COUNT(likes.id) AS like_count
    FROM users
    JOIN likes ON users.id = likes.user_id
    GROUP BY users.id
    HAVING like_count > 0
    ORDER BY like_count DESC;
    """)
    results = cursor.fetchall()
    print("\nüëç U≈ºytkownicy, kt√≥rzy polubili najwiƒôcej post√≥w:")
    for row in results:
        print(row)


# Pobranie log√≥w operacji
def get_logs():
    cursor.execute("SELECT id, event, details, created_at FROM logs ORDER BY created_at DESC")
    logs = cursor.fetchall()
    print("\nüìú Historia operacji (logi):")
    print("=" * 50)
    for log in logs:
        print(log)


# Usuwanie u≈ºytkownik√≥w bez post√≥w
def delete_inactive_users():
    cursor.execute("""
    DELETE FROM users 
    WHERE id NOT IN (SELECT DISTINCT user_id FROM posts);
    """)
    conn.commit()
    print("üóë Usuniƒôto nieaktywnych u≈ºytkownik√≥w (bez post√≥w).")


# Usuwanie post√≥w starszych ni≈º 30 dni
def delete_old_posts():
    cursor.execute("""
    DELETE FROM posts 
    WHERE created_at < DATETIME('now', '-30 days');
    """)
    conn.commit()
    print("üóë Usuniƒôto stare posty (starsze ni≈º 30 dni).")


# Usuwanie komentarzy do nieistniejƒÖcych post√≥w
def delete_orphan_comments():
    cursor.execute("""
    DELETE FROM comments
    WHERE post_id NOT IN (SELECT id FROM posts WHERE id IS NOT NULL);
    """)
    conn.commit()
    print("üóë Usuniƒôto osierocone komentarze (dotyczƒÖce nieistniejƒÖcych post√≥w).")


# Usuwanie polubie≈Ñ do nieistniejƒÖcych post√≥w
def delete_orphan_likes():
    cursor.execute("""
    DELETE FROM likes 
    WHERE post_id NOT IN (SELECT id FROM posts);
    """)
    conn.commit()
    print("üóë Usuniƒôto polubienia do usuniƒôtych post√≥w.")


# Defragmentacja bazy danych
def optimize_database():
    cursor.execute("VACUUM;")
    conn.commit()
    print("üõ† Wykonano optymalizacjƒô bazy danych (VACUUM).")


# Funkcja do eksportu danych do CSV
def export_to_csv(query, filename, headers):
    cursor.execute(query)
    rows = cursor.fetchall()
    with open(filename, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(headers)
        writer.writerows(rows)
    print(f"üìÅ Eksportowano dane do {filename}!")


# Eksport u≈ºytkownik√≥w
def export_users():
    export_to_csv(
        "SELECT id, username, email, created_at FROM users",
        "users.csv",
        ["ID", "Username", "Email", "Created At"]
    )


# Eksport post√≥w
def export_posts():
    export_to_csv(
        "SELECT posts.id, users.username, posts.content, posts.created_at FROM posts JOIN users ON posts.user_id = users.id",
        "posts.csv",
        ["Post ID", "Username", "Content", "Created At"]
    )


# Eksport komentarzy
def export_comments():
    export_to_csv(
        "SELECT comments.id, users.username, posts.content, comments.content, comments.created_at FROM comments JOIN users ON comments.user_id = users.id JOIN posts ON comments.post_id = posts.id",
        "comments.csv",
        ["Comment ID", "Username", "Post Content", "Comment Content", "Created At"]
    )


# Eksport polubie≈Ñ
def export_likes():
    export_to_csv(
        "SELECT likes.id, users.username, posts.content, likes.created_at FROM likes JOIN users ON likes.user_id = users.id JOIN posts ON likes.post_id = posts.id",
        "likes.csv",
        ["Like ID", "Username", "Post Content", "Created At"]
    )


# Zapytanie u≈ºytkownika, czy chce dodaƒá polubienie
while True:
    choice = input("\n‚ù§Ô∏è Czy chcesz polubiƒá post? (tak/nie): ").strip().lower()
    if choice == "tak":
        add_like_interactively()
    elif choice == "nie":
        print("üëã Zako≈Ñczono dodawanie polubie≈Ñ.")
        break
    else:
        print("‚ö† Wpisz 'tak' lub 'nie'.")

# Zapytanie u≈ºytkownika o dodanie u≈ºytkownik√≥w
while True:
    choice = input("\n‚ûï Czy chcesz dodaƒá nowego u≈ºytkownika? (tak/nie): ").strip().lower()
    if choice == "tak":
        add_user_interactively()
    elif choice == "nie":
        print("üëã Zako≈Ñczono dodawanie u≈ºytkownik√≥w.")
        break
    else:
        print("‚ö† Wpisz 'tak' lub 'nie'.")

# Zapytanie u≈ºytkownika o dodanie post√≥w
while True:
    choice = input("\nüìù Czy chcesz dodaƒá nowy post? (tak/nie): ").strip().lower()
    if choice == "tak":
        add_post_interactively()
    elif choice == "nie":
        print("üëã Zako≈Ñczono dodawanie post√≥w.")
        break
    else:
        print("‚ö† Wpisz 'tak' lub 'nie'.")

# Zapytanie u≈ºytkownika o dodanie komentarzy
while True:
    choice = input("\nüí¨ Czy chcesz dodaƒá nowy komentarz? (tak/nie): ").strip().lower()
    if choice == "tak":
        add_comment_interactively()
    elif choice == "nie":
        print("üëã Zako≈Ñczono dodawanie komentarzy.")
        break
    else:
        print("‚ö† Wpisz 'tak' lub 'nie'.")

# Wy≈õwietlenie aktualnej listy u≈ºytkownik√≥w
cursor.execute("SELECT * FROM users")
users = cursor.fetchall()
print("\nüìú Zaktualizowana lista u≈ºytkownik√≥w:")
print("=" * 50)
for user in users:
    print(user)

# Pobranie wszystkich post√≥w
cursor.execute("""
SELECT posts.id, users.username, posts.content, posts.created_at
FROM posts
JOIN users ON posts.user_id = users.id
""")
posts = cursor.fetchall()
print("\nüì∞ Lista post√≥w:")
print("=" * 50)
for post in posts:
    print(post)

# Pobranie wszystkich komentarzy
cursor.execute("""
SELECT c.id, u.username, p.content AS post_content, c.content AS comment_content, c.created_at
FROM comments c
JOIN users u ON c.user_id = u.id
JOIN posts p ON c.post_id = p.id
""")
comments = cursor.fetchall()
print("\nüí¨ Lista komentarzy:")
print("=" * 50)
for comment in comments:
    print(comment)

# Dodatkowa diagnostyka: pe≈Çna tabela comments
cursor.execute("SELECT * FROM comments")
print("\nüìù Pe≈Çna tabela komentarzy przed zako≈Ñczeniem:")
print(cursor.fetchall())

# Pobranie wszystkich polubie≈Ñ
cursor.execute("""
SELECT likes.id, users.username, posts.content, likes.created_at
FROM likes
JOIN users ON likes.user_id = users.id
JOIN posts ON likes.post_id = posts.id
""")
likes = cursor.fetchall()
print("\nüëç Lista polubie≈Ñ:")
print("=" * 50)
for like in likes:
    print(like)

# Testowanie wydajno≈õci zapytania - EXPLAIN QUERY PLAN
print("\nüìä Testowanie wydajno≈õci zapyta≈Ñ...")
cursor.execute("EXPLAIN QUERY PLAN SELECT * FROM users WHERE username = 'user1';")
print("üîç Plan zapytania dla wyszukiwania u≈ºytkownika:", cursor.fetchall())
cursor.execute("EXPLAIN QUERY PLAN SELECT * FROM posts WHERE user_id = 1 ORDER BY created_at DESC;")
print("üîç Plan zapytania dla wyszukiwania post√≥w:", cursor.fetchall())
cursor.execute("EXPLAIN QUERY PLAN SELECT * FROM comments WHERE post_id = 1;")
print("üîç Plan zapytania dla wyszukiwania komentarzy:", cursor.fetchall())

print("\nüõ† Testowanie transakcji...")
try:
    cursor.execute("BEGIN")
    cursor.execute("INSERT INTO users (username, email) VALUES ('test_user', 'test@example.com')")
    cursor.execute("INSERT INTO users (username, email) VALUES ('test_user', 'test@example.com')")
    conn.commit()
    print("‚úÖ Testowa transakcja zako≈Ñczona sukcesem!")
except sqlite3.IntegrityError:
    conn.rollback()
    print("‚ö† B≈ÇƒÖd w transakcji! Zmiany zosta≈Çy cofniƒôte.")

print("\nüìå Testowanie procedur sk≈Çadowanych...")
get_user_posts(2)
get_post_comments(1)
get_post_likes(1)

print("\nüìå Testowanie zaawansowanej analizy SQL...")
get_user_post_counts()
get_most_commented_posts()
get_top_likers()

# Diagnostyka przed optymalizacjƒÖ
print("\nüìå TEST: Lista post√≥w przed optymalizacjƒÖ:")
cursor.execute("SELECT * FROM posts;")
print(cursor.fetchall())
print("\nüìå TEST: Lista komentarzy przed optymalizacjƒÖ:")
cursor.execute("SELECT * FROM comments;")
print(cursor.fetchall())

# Opcjonalna optymalizacja z pytaniem
choice = input("\nüõ† Czy chcesz przeprowadziƒá optymalizacjƒô bazy (usuwanie starych danych)? (tak/nie): ").strip().lower()
if choice == "tak":
    print("\nüìå Wykonywanie optymalizacji bazy danych...")
    delete_inactive_users()
    delete_old_posts()
    delete_orphan_comments()
    delete_orphan_likes()
    optimize_database()
    # Diagnostyka po optymalizacji
    print("\nüìå TEST: Lista post√≥w po optymalizacji:")
    cursor.execute("SELECT * FROM posts;")
    print(cursor.fetchall())
    print("\nüìå TEST: Lista komentarzy po optymalizacji:")
    cursor.execute("SELECT * FROM comments;")
    print(cursor.fetchall())
else:
    print("üëã Pominiƒôto optymalizacjƒô ‚Äì dane pozostajƒÖ bez zmian.")

print("\nüìå Eksportowanie danych do CSV...")
export_users()
export_posts()
export_comments()
export_likes()


# Eksport log√≥w do CSV
def export_logs():
    export_to_csv(
        "SELECT id, event, details, created_at FROM logs",
        "logs.csv",
        ["Log ID", "Event", "Details", "Created At"]
    )


print("\nüìå Eksportowanie log√≥w do CSV...")
export_logs()

# Zamykamy po≈ÇƒÖczenie z bazƒÖ
conn.commit()
conn.close()
print("‚úÖ Proces zako≈Ñczony!")